ercot_cfs <- data.frame(matrix(ncol = 3, nrow = length(ercot_var_gens)*dim(t_points)[1]))
colnames(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
ercot_cfs$GENERATION_PROJECT <- rep(ercot_var_gens, each = dim(t_points)[1])
ercot_cfs$gen_max_capacity_factor <- 1 # setting all cap at 1 for now
ercot_cfs$timepoint <- as.integer( rep(1:dim(t_points)[1], length(ercot_var_gens)) )
# rename columns and rows
names(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
row.names(ercot_cfs) <- 1:dim(ercot_cfs)[1]
write.table(ercot_cfs, paste(c(SaveTo,"variable_capacity_factors.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
}
View(ercot_gen_info)
ercot_gen_info$gen_full_load_heat_rate[ercot_gen_info$gen_full_load_heat_rate == 0] <- levels(ercot_gen_info$gen_full_load_heat_rate)[20]
write.table(ercot_gen_info, paste(c(SaveTo,"generation_projects_info.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
months = as.character(c("01","02","03","04","05","06","07","08","09",10,11,12)) # to expand the for-loops to do all twelve months, remove ))#
for(m in 2:length(months)){
# create directories for each month
SaveTo <- paste(c("./2017_",months[m],"/inputs/"), collapse = "")
# dir.create(paste(c("2017_",months[m]), collapse = ""))
# dir.create(SaveTo)############################ Already ran this. Doing it again will output an error
# Copy the .tabs generated for January model above
write.table(ercot_gen_info, paste(c(SaveTo,"generation_projects_info.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_predet, paste(c(SaveTo,"gen_build_predetermined.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_build, paste(c(SaveTo,"gen_build_costs.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_zones, paste(c(SaveTo,"load_zones.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_fuels, paste(c(SaveTo,"fuels.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(periods, paste(c(SaveTo,"periods.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
############################ NEED TO CONFIRM if these remain unchanged
# modules.txt ----------------------------------------------------------UNCHANGED
modules = paste(c(AnnualModel2015,"modules.txt"), collapse = "")
file.copy(modules, SaveTo)
# switch_inputs_version.txt ----------------------------------------------------------UNCHANGED
version = paste(c(AnnualModel2015,"switch_inputs_version.txt"), collapse = "")
file.copy(version, SaveTo)
# financials.dat ----------------------------------------------------------UNCHANGED
AnnualFinancials = paste(c(AnnualModel2015,"financials.dat"), collapse = "")
file.copy(AnnualFinancials, SaveTo)
# non_fuel_energy_sources.tab ---------------------------------------------UNCHANGED
AnnualNonFuels = paste(c(AnnualModel2015,"non_fuel_energy_sources.tab"), collapse = "")
file.copy(AnnualNonFuels, SaveTo)
# timeseries.tab ----------------------------------------------------------
# AnnualTimeseries = paste(c(AnnualModel2015,"timeseries.tab"), collapse = "")
# fce_tseries <- read.delim(file = AnnualTimeseries, header = T, sep = "\t")
View(rbind.data.frame(lapply(fce_tseries, class),lapply(t_series, class)))
t_series <- data.frame(matrix(ncol = 5, nrow = 1))
names(t_series) <- c("TIMESERIES","ts_period","ts_duration_of_tp","ts_num_tps","ts_scale_to_period")
# Unchanged columns in this .tab are:
t_series$ts_duration_of_tp <- as.integer(1)     # duration, in hours, of each timepoint within a timeseries
t_series$TIMESERIES <- as.factor(paste(c("2017_",months[m]), collapse = ""))
t_series$ts_period <- as.integer(2017)
t_series$ts_num_tps <- as.integer(24*num_days[m]) # number of timepoints in a series
t_series$ts_scale_to_period <- 8766/(24*num_days[m])
write.table(t_series, paste(c(SaveTo,"timeseries.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# timepoints.tab ----------------------------------------------------------
t_points <- data.frame(matrix(ncol = 3, nrow = num_days[m]*length(hours)))
colnames(t_points) <- c("timepoint_id","timestamp","timeseries")
t_points$timeseries <- t_series$TIMESERIES
tp_start <- 24*sum(num_days[1:m-1]) + 1 # skip all previous months
tp_end <- tp_start + 24*num_days[m] - 1
t_points$timepoint_id <- tp_start:tp_end
count = 0
for(d in 1:num_days[m]){
for(h in 1:length(hours)){
count = count + 1
t_points$timestamp[count] <- paste(c(2017, as.character(months[m]), as.character(days_max[d]), as.character(hours[h])), collapse = "")
}
}
write.table(t_points, paste(c(SaveTo,"timepoints.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# loads.tab ---------------------------------------------------------------
ercot_loads <- data.frame(matrix(ncol = 3, nrow = dim(ercot_zones)[1]*dim(t_points)[1]))
colnames(ercot_loads) <- c("LOAD_ZONE","TIMEPOINT","zone_demand_mw")
row_count = 0
for(k in 1:dim(ercot_zones)[1]){ # loop through load zones
for(j in 1:dim(t_points)[1]){ # loop through timepoints
row_count = row_count+1
ercot_loads$LOAD_ZONE[row_count] <- as.character(ercot_zones$LOAD_ZONE[k])
ercot_loads$TIMEPOINT[row_count] <- t_points$timepoint_id[j]
ercot_loads$zone_demand_mw[row_count] <- as.numeric(PLEXOS_zone_data[j,k+4])
}
}
# Export .tab
write.table(ercot_loads, paste(c(SaveTo,"loads.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# variable_capacity_factors.tab ------------------------------------------- # NEED TO SAVE ANNUAL CFS, THEN RUN LOOP
ercot_var_gens <- ercot_gen_info$GENERATION_PROJECT[ercot_gen_info$gen_is_variable==1] # isolate list of variable generators
ercot_cfs <- data.frame(matrix(ncol = 3, nrow = length(ercot_var_gens)*dim(t_points)[1]))
colnames(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
ercot_cfs$GENERATION_PROJECT <- rep(ercot_var_gens, each = dim(t_points)[1])
ercot_cfs$gen_max_capacity_factor <- 1 # setting all cap at 1 for now
ercot_cfs$timepoint <- as.integer( rep(1:dim(t_points)[1], length(ercot_var_gens)) )
# rename columns and rows
names(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
row.names(ercot_cfs) <- 1:dim(ercot_cfs)[1]
write.table(ercot_cfs, paste(c(SaveTo,"variable_capacity_factors.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
}
SaveTo
length(months)
2:length(months)
m
for(m in 2:length(months)){
# create directories for each month
SaveTo <- paste(c("./2017_",months[m],"/inputs/"), collapse = "")
# dir.create(paste(c("2017_",months[m]), collapse = ""))
# dir.create(SaveTo)############################ Already ran this. Doing it again will output an error
# Copy the .tabs generated for January model above
write.table(ercot_gen_info, paste(c(SaveTo,"generation_projects_info.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_predet, paste(c(SaveTo,"gen_build_predetermined.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_build, paste(c(SaveTo,"gen_build_costs.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_zones, paste(c(SaveTo,"load_zones.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_fuels, paste(c(SaveTo,"fuels.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(periods, paste(c(SaveTo,"periods.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
############################ NEED TO CONFIRM if these remain unchanged
# modules.txt ----------------------------------------------------------UNCHANGED
modules = paste(c(AnnualModel2015,"modules.txt"), collapse = "")
file.copy(modules, SaveTo)
# switch_inputs_version.txt ----------------------------------------------------------UNCHANGED
version = paste(c(AnnualModel2015,"switch_inputs_version.txt"), collapse = "")
file.copy(version, SaveTo)
# financials.dat ----------------------------------------------------------UNCHANGED
AnnualFinancials = paste(c(AnnualModel2015,"financials.dat"), collapse = "")
file.copy(AnnualFinancials, SaveTo)
# non_fuel_energy_sources.tab ---------------------------------------------UNCHANGED
AnnualNonFuels = paste(c(AnnualModel2015,"non_fuel_energy_sources.tab"), collapse = "")
file.copy(AnnualNonFuels, SaveTo)
# timeseries.tab ----------------------------------------------------------
# AnnualTimeseries = paste(c(AnnualModel2015,"timeseries.tab"), collapse = "")
# fce_tseries <- read.delim(file = AnnualTimeseries, header = T, sep = "\t")
View(rbind.data.frame(lapply(fce_tseries, class),lapply(t_series, class)))
t_series <- data.frame(matrix(ncol = 5, nrow = 1))
names(t_series) <- c("TIMESERIES","ts_period","ts_duration_of_tp","ts_num_tps","ts_scale_to_period")
# Unchanged columns in this .tab are:
t_series$ts_duration_of_tp <- as.integer(1)     # duration, in hours, of each timepoint within a timeseries
t_series$TIMESERIES <- as.factor(paste(c("2017_",months[m]), collapse = ""))
t_series$ts_period <- as.integer(2017)
t_series$ts_num_tps <- as.integer(24*num_days[m]) # number of timepoints in a series
t_series$ts_scale_to_period <- 8766/(24*num_days[m])
write.table(t_series, paste(c(SaveTo,"timeseries.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# timepoints.tab ----------------------------------------------------------
t_points <- data.frame(matrix(ncol = 3, nrow = num_days[m]*length(hours)))
colnames(t_points) <- c("timepoint_id","timestamp","timeseries")
t_points$timeseries <- t_series$TIMESERIES
tp_start <- 24*sum(num_days[1:m-1]) + 1 # skip all previous months
tp_end <- tp_start + 24*num_days[m] - 1
t_points$timepoint_id <- tp_start:tp_end
count = 0
for(d in 1:num_days[m]){
for(h in 1:length(hours)){
count = count + 1
t_points$timestamp[count] <- paste(c(2017, as.character(months[m]), as.character(days_max[d]), as.character(hours[h])), collapse = "")
}
}
write.table(t_points, paste(c(SaveTo,"timepoints.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# loads.tab ---------------------------------------------------------------
ercot_loads <- data.frame(matrix(ncol = 3, nrow = dim(ercot_zones)[1]*dim(t_points)[1]))
colnames(ercot_loads) <- c("LOAD_ZONE","TIMEPOINT","zone_demand_mw")
row_count = 0
for(k in 1:dim(ercot_zones)[1]){ # loop through load zones
for(j in 1:dim(t_points)[1]){ # loop through timepoints
row_count = row_count+1
ercot_loads$LOAD_ZONE[row_count] <- as.character(ercot_zones$LOAD_ZONE[k])
ercot_loads$TIMEPOINT[row_count] <- t_points$timepoint_id[j]
ercot_loads$zone_demand_mw[row_count] <- as.numeric(PLEXOS_zone_data[j,k+4])
}
}
# Export .tab
write.table(ercot_loads, paste(c(SaveTo,"loads.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# variable_capacity_factors.tab ------------------------------------------- # NEED TO SAVE ANNUAL CFS, THEN RUN LOOP
ercot_var_gens <- ercot_gen_info$GENERATION_PROJECT[ercot_gen_info$gen_is_variable==1] # isolate list of variable generators
ercot_cfs <- data.frame(matrix(ncol = 3, nrow = length(ercot_var_gens)*dim(t_points)[1]))
colnames(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
ercot_cfs$GENERATION_PROJECT <- rep(ercot_var_gens, each = dim(t_points)[1])
ercot_cfs$gen_max_capacity_factor <- 1 # setting all cap at 1 for now
ercot_cfs$timepoint <- as.integer( rep(1:dim(t_points)[1], length(ercot_var_gens)) )
# rename columns and rows
names(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
row.names(ercot_cfs) <- 1:dim(ercot_cfs)[1]
write.table(ercot_cfs, paste(c(SaveTo,"variable_capacity_factors.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
}
m
getwd()
list.files()
for(m in 2:length(months)){
# create directories for each month
SaveTo <- paste(c("./2017_",months[m],"/inputs/"), collapse = "")
SaveTo
# dir.create(paste(c("2017_",months[m]), collapse = ""))
# dir.create(SaveTo)############################ Already ran this. Doing it again will output an error
#
#
#
# # Copy the .tabs generated for January model above
# write.table(ercot_gen_info, paste(c(SaveTo,"generation_projects_info.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# write.table(ercot_predet, paste(c(SaveTo,"gen_build_predetermined.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# write.table(ercot_build, paste(c(SaveTo,"gen_build_costs.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# write.table(ercot_zones, paste(c(SaveTo,"load_zones.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# write.table(ercot_fuels, paste(c(SaveTo,"fuels.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# write.table(periods, paste(c(SaveTo,"periods.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
#
#
# ############################ NEED TO CONFIRM if these remain unchanged
# # modules.txt ----------------------------------------------------------UNCHANGED
# modules = paste(c(AnnualModel2015,"modules.txt"), collapse = "")
# file.copy(modules, SaveTo)
#
# # switch_inputs_version.txt ----------------------------------------------------------UNCHANGED
# version = paste(c(AnnualModel2015,"switch_inputs_version.txt"), collapse = "")
# file.copy(version, SaveTo)
#
# # financials.dat ----------------------------------------------------------UNCHANGED
# AnnualFinancials = paste(c(AnnualModel2015,"financials.dat"), collapse = "")
# file.copy(AnnualFinancials, SaveTo)
#
#
# # non_fuel_energy_sources.tab ---------------------------------------------UNCHANGED
# AnnualNonFuels = paste(c(AnnualModel2015,"non_fuel_energy_sources.tab"), collapse = "")
# file.copy(AnnualNonFuels, SaveTo)
#
#
#
#
# # timeseries.tab ----------------------------------------------------------
# # AnnualTimeseries = paste(c(AnnualModel2015,"timeseries.tab"), collapse = "")
# # fce_tseries <- read.delim(file = AnnualTimeseries, header = T, sep = "\t")
# View(rbind.data.frame(lapply(fce_tseries, class),lapply(t_series, class)))
#
# t_series <- data.frame(matrix(ncol = 5, nrow = 1))
# names(t_series) <- c("TIMESERIES","ts_period","ts_duration_of_tp","ts_num_tps","ts_scale_to_period")
# # Unchanged columns in this .tab are:
# t_series$ts_duration_of_tp <- as.integer(1)     # duration, in hours, of each timepoint within a timeseries
# t_series$TIMESERIES <- as.factor(paste(c("2017_",months[m]), collapse = ""))
# t_series$ts_period <- as.integer(2017)
# t_series$ts_num_tps <- as.integer(24*num_days[m]) # number of timepoints in a series
# t_series$ts_scale_to_period <- 8766/(24*num_days[m])
#
# write.table(t_series, paste(c(SaveTo,"timeseries.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
#
#
#
# # timepoints.tab ----------------------------------------------------------
# t_points <- data.frame(matrix(ncol = 3, nrow = num_days[m]*length(hours)))
# colnames(t_points) <- c("timepoint_id","timestamp","timeseries")
# t_points$timeseries <- t_series$TIMESERIES
# tp_start <- 24*sum(num_days[1:m-1]) + 1 # skip all previous months
# tp_end <- tp_start + 24*num_days[m] - 1
# t_points$timepoint_id <- tp_start:tp_end
# count = 0
# for(d in 1:num_days[m]){
#   for(h in 1:length(hours)){
#     count = count + 1
#     t_points$timestamp[count] <- paste(c(2017, as.character(months[m]), as.character(days_max[d]), as.character(hours[h])), collapse = "")
#   }
# }
# write.table(t_points, paste(c(SaveTo,"timepoints.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
#
#
#
# # loads.tab ---------------------------------------------------------------
# ercot_loads <- data.frame(matrix(ncol = 3, nrow = dim(ercot_zones)[1]*dim(t_points)[1]))
# colnames(ercot_loads) <- c("LOAD_ZONE","TIMEPOINT","zone_demand_mw")
#
# row_count = 0
# for(k in 1:dim(ercot_zones)[1]){ # loop through load zones
#   for(j in 1:dim(t_points)[1]){ # loop through timepoints
#     row_count = row_count+1
#     ercot_loads$LOAD_ZONE[row_count] <- as.character(ercot_zones$LOAD_ZONE[k])
#     ercot_loads$TIMEPOINT[row_count] <- t_points$timepoint_id[j]
#     ercot_loads$zone_demand_mw[row_count] <- as.numeric(PLEXOS_zone_data[j,k+4])
#   }
# }
#
#
# # Export .tab
# write.table(ercot_loads, paste(c(SaveTo,"loads.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
#
#
# # variable_capacity_factors.tab ------------------------------------------- # NEED TO SAVE ANNUAL CFS, THEN RUN LOOP
# ercot_var_gens <- ercot_gen_info$GENERATION_PROJECT[ercot_gen_info$gen_is_variable==1] # isolate list of variable generators
# ercot_cfs <- data.frame(matrix(ncol = 3, nrow = length(ercot_var_gens)*dim(t_points)[1]))
# colnames(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
# ercot_cfs$GENERATION_PROJECT <- rep(ercot_var_gens, each = dim(t_points)[1])
# ercot_cfs$gen_max_capacity_factor <- 1 # setting all cap at 1 for now
# ercot_cfs$timepoint <- as.integer( rep(1:dim(t_points)[1], length(ercot_var_gens)) )
# # rename columns and rows
# names(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
# row.names(ercot_cfs) <- 1:dim(ercot_cfs)[1]
# write.table(ercot_cfs, paste(c(SaveTo,"variable_capacity_factors.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
#
}
SaveTo
m=2
m=3
print(SaveTo)
for(m in 2:length(months)){
# create directories for each month
SaveTo <- paste(c("./2017_",months[m],"/inputs/"), collapse = "")
# dir.create(paste(c("2017_",months[m]), collapse = ""))
# dir.create(SaveTo)############################ Already ran this. Doing it again will output an error
print(SaveTo)
}
for(m in 2:length(months)){
# create directories for each month
SaveTo <- paste(c("./2017_",months[m],"/inputs/"), collapse = "")
# dir.create(paste(c("2017_",months[m]), collapse = ""))
# dir.create(SaveTo)############################ Already ran this. Doing it again will output an error
print(SaveTo)
# Copy the .tabs generated for January model above
write.table(ercot_gen_info, paste(c(SaveTo,"generation_projects_info.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_predet, paste(c(SaveTo,"gen_build_predetermined.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_build, paste(c(SaveTo,"gen_build_costs.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_zones, paste(c(SaveTo,"load_zones.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_fuels, paste(c(SaveTo,"fuels.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(periods, paste(c(SaveTo,"periods.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
}
for(m in 2:length(months)){
# create directories for each month
SaveTo <- paste(c("./2017_",months[m],"/inputs/"), collapse = "")
# dir.create(paste(c("2017_",months[m]), collapse = ""))
# dir.create(SaveTo)############################ Already ran this. Doing it again will output an error
print(SaveTo)
# Copy the .tabs generated for January model above
write.table(ercot_gen_info, paste(c(SaveTo,"generation_projects_info.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_predet, paste(c(SaveTo,"gen_build_predetermined.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_build, paste(c(SaveTo,"gen_build_costs.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_zones, paste(c(SaveTo,"load_zones.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(ercot_fuels, paste(c(SaveTo,"fuels.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
write.table(periods, paste(c(SaveTo,"periods.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
############################ NEED TO CONFIRM if these remain unchanged
# modules.txt ----------------------------------------------------------UNCHANGED
modules = paste(c(AnnualModel2015,"modules.txt"), collapse = "")
file.copy(modules, SaveTo)
# switch_inputs_version.txt ----------------------------------------------------------UNCHANGED
version = paste(c(AnnualModel2015,"switch_inputs_version.txt"), collapse = "")
file.copy(version, SaveTo)
# financials.dat ----------------------------------------------------------UNCHANGED
AnnualFinancials = paste(c(AnnualModel2015,"financials.dat"), collapse = "")
file.copy(AnnualFinancials, SaveTo)
# non_fuel_energy_sources.tab ---------------------------------------------UNCHANGED
AnnualNonFuels = paste(c(AnnualModel2015,"non_fuel_energy_sources.tab"), collapse = "")
file.copy(AnnualNonFuels, SaveTo)
}
for(m in 2:length(months)){
# create directories for each month
SaveTo <- paste(c("./2017_",months[m],"/inputs/"), collapse = "")
# timeseries.tab ----------------------------------------------------------
# AnnualTimeseries = paste(c(AnnualModel2015,"timeseries.tab"), collapse = "")
# fce_tseries <- read.delim(file = AnnualTimeseries, header = T, sep = "\t")
# View(rbind.data.frame(lapply(fce_tseries, class),lapply(t_series, class)))
t_series <- data.frame(matrix(ncol = 5, nrow = 1))
names(t_series) <- c("TIMESERIES","ts_period","ts_duration_of_tp","ts_num_tps","ts_scale_to_period")
# Unchanged columns in this .tab are:
t_series$ts_duration_of_tp <- as.integer(1)     # duration, in hours, of each timepoint within a timeseries
t_series$TIMESERIES <- as.factor(paste(c("2017_",months[m]), collapse = ""))
t_series$ts_period <- as.integer(2017)
t_series$ts_num_tps <- as.integer(24*num_days[m]) # number of timepoints in a series
t_series$ts_scale_to_period <- 8766/(24*num_days[m])
write.table(t_series, paste(c(SaveTo,"timeseries.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# timepoints.tab ----------------------------------------------------------
t_points <- data.frame(matrix(ncol = 3, nrow = num_days[m]*length(hours)))
colnames(t_points) <- c("timepoint_id","timestamp","timeseries")
t_points$timeseries <- t_series$TIMESERIES
tp_start <- 24*sum(num_days[1:m-1]) + 1 # skip all previous months
tp_end <- tp_start + 24*num_days[m] - 1
t_points$timepoint_id <- tp_start:tp_end
count = 0
for(d in 1:num_days[m]){
for(h in 1:length(hours)){
count = count + 1
t_points$timestamp[count] <- paste(c(2017, as.character(months[m]), as.character(days_max[d]), as.character(hours[h])), collapse = "")
}
}
write.table(t_points, paste(c(SaveTo,"timepoints.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# loads.tab ---------------------------------------------------------------
ercot_loads <- data.frame(matrix(ncol = 3, nrow = dim(ercot_zones)[1]*dim(t_points)[1]))
colnames(ercot_loads) <- c("LOAD_ZONE","TIMEPOINT","zone_demand_mw")
row_count = 0
for(k in 1:dim(ercot_zones)[1]){ # loop through load zones
for(j in 1:dim(t_points)[1]){ # loop through timepoints
row_count = row_count+1
ercot_loads$LOAD_ZONE[row_count] <- as.character(ercot_zones$LOAD_ZONE[k])
ercot_loads$TIMEPOINT[row_count] <- t_points$timepoint_id[j]
ercot_loads$zone_demand_mw[row_count] <- as.numeric(PLEXOS_zone_data[j,k+4])
}
}
# Export .tab
write.table(ercot_loads, paste(c(SaveTo,"loads.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# variable_capacity_factors.tab ------------------------------------------- # NEED TO SAVE ANNUAL CFS, THEN RUN LOOP
ercot_var_gens <- ercot_gen_info$GENERATION_PROJECT[ercot_gen_info$gen_is_variable==1] # isolate list of variable generators
ercot_cfs <- data.frame(matrix(ncol = 3, nrow = length(ercot_var_gens)*dim(t_points)[1]))
colnames(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
ercot_cfs$GENERATION_PROJECT <- rep(ercot_var_gens, each = dim(t_points)[1])
ercot_cfs$gen_max_capacity_factor <- 1 # setting all cap at 1 for now
ercot_cfs$timepoint <- as.integer( rep(1:dim(t_points)[1], length(ercot_var_gens)) )
# rename columns and rows
names(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
row.names(ercot_cfs) <- 1:dim(ercot_cfs)[1]
write.table(ercot_cfs, paste(c(SaveTo,"variable_capacity_factors.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
}
m
for(m in 2:length(months)){
# create directories for each month
SaveTo <- paste(c("./2017_",months[m],"/inputs/"), collapse = "")
# timeseries.tab ----------------------------------------------------------
# AnnualTimeseries = paste(c(AnnualModel2015,"timeseries.tab"), collapse = "")
# fce_tseries <- read.delim(file = AnnualTimeseries, header = T, sep = "\t")
# View(rbind.data.frame(lapply(fce_tseries, class),lapply(t_series, class)))
t_series <- data.frame(matrix(ncol = 5, nrow = 1))
names(t_series) <- c("TIMESERIES","ts_period","ts_duration_of_tp","ts_num_tps","ts_scale_to_period")
# Unchanged columns in this .tab are:
t_series$ts_duration_of_tp <- as.integer(1)     # duration, in hours, of each timepoint within a timeseries
t_series$TIMESERIES <- as.factor(paste(c("2017_",months[m]), collapse = ""))
t_series$ts_period <- as.integer(2017)
t_series$ts_num_tps <- as.integer(24*num_days[m]) # number of timepoints in a series
t_series$ts_scale_to_period <- 8766/(24*num_days[m])
write.table(t_series, paste(c(SaveTo,"timeseries.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# timepoints.tab ----------------------------------------------------------
t_points <- data.frame(matrix(ncol = 3, nrow = num_days[m]*length(hours)))
colnames(t_points) <- c("timepoint_id","timestamp","timeseries")
t_points$timeseries <- t_series$TIMESERIES
tp_start <- 24*sum(num_days[1:m-1]) + 1 # skip all previous months
tp_end <- tp_start + 24*num_days[m] - 1
t_points$timepoint_id <- tp_start:tp_end
count = 0
for(d in 1:num_days[m]){
for(h in 1:length(hours)){
count = count + 1
t_points$timestamp[count] <- paste(c(2017, as.character(months[m]), as.character(days_max[d]), as.character(hours[h])), collapse = "")
}
}
write.table(t_points, paste(c(SaveTo,"timepoints.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# loads.tab ---------------------------------------------------------------
ercot_loads <- data.frame(matrix(ncol = 3, nrow = dim(ercot_zones)[1]*dim(t_points)[1]))
colnames(ercot_loads) <- c("LOAD_ZONE","TIMEPOINT","zone_demand_mw")
row_count = 0
for(k in 1:dim(ercot_zones)[1]){ # loop through load zones
for(j in 1:dim(t_points)[1]){ # loop through timepoints
row_count = row_count+1
ercot_loads$LOAD_ZONE[row_count] <- as.character(ercot_zones$LOAD_ZONE[k])
ercot_loads$TIMEPOINT[row_count] <- t_points$timepoint_id[j]
ercot_loads$zone_demand_mw[row_count] <- as.numeric(PLEXOS_zone_data[j,k+4])
}
}
# Export .tab
write.table(ercot_loads, paste(c(SaveTo,"loads.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# variable_capacity_factors.tab ------------------------------------------- # NEED TO SAVE ANNUAL CFS, THEN RUN LOOP
# ercot_var_gens <- ercot_gen_info$GENERATION_PROJECT[ercot_gen_info$gen_is_variable==1] # isolate list of variable generators
# ercot_cfs <- data.frame(matrix(ncol = 3, nrow = length(ercot_var_gens)*dim(t_points)[1]))
# colnames(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
# ercot_cfs$GENERATION_PROJECT <- rep(ercot_var_gens, each = dim(t_points)[1])
# ercot_cfs$gen_max_capacity_factor <- 1 # setting all cap at 1 for now
# ercot_cfs$timepoint <- as.integer( rep(1:dim(t_points)[1], length(ercot_var_gens)) )
# # rename columns and rows
# names(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
# row.names(ercot_cfs) <- 1:dim(ercot_cfs)[1]
# write.table(ercot_cfs, paste(c(SaveTo,"variable_capacity_factors.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
file.copy("./2017_01/inputs/variable_capacity_factors.tab")
}
for(m in 2:length(months)){
# create directories for each month
SaveTo <- paste(c("./2017_",months[m],"/inputs/"), collapse = "")
# timeseries.tab ----------------------------------------------------------
# AnnualTimeseries = paste(c(AnnualModel2015,"timeseries.tab"), collapse = "")
# fce_tseries <- read.delim(file = AnnualTimeseries, header = T, sep = "\t")
# View(rbind.data.frame(lapply(fce_tseries, class),lapply(t_series, class)))
t_series <- data.frame(matrix(ncol = 5, nrow = 1))
names(t_series) <- c("TIMESERIES","ts_period","ts_duration_of_tp","ts_num_tps","ts_scale_to_period")
# Unchanged columns in this .tab are:
t_series$ts_duration_of_tp <- as.integer(1)     # duration, in hours, of each timepoint within a timeseries
t_series$TIMESERIES <- as.factor(paste(c("2017_",months[m]), collapse = ""))
t_series$ts_period <- as.integer(2017)
t_series$ts_num_tps <- as.integer(24*num_days[m]) # number of timepoints in a series
t_series$ts_scale_to_period <- 8766/(24*num_days[m])
write.table(t_series, paste(c(SaveTo,"timeseries.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# timepoints.tab ----------------------------------------------------------
t_points <- data.frame(matrix(ncol = 3, nrow = num_days[m]*length(hours)))
colnames(t_points) <- c("timepoint_id","timestamp","timeseries")
t_points$timeseries <- t_series$TIMESERIES
tp_start <- 24*sum(num_days[1:m-1]) + 1 # skip all previous months
tp_end <- tp_start + 24*num_days[m] - 1
t_points$timepoint_id <- tp_start:tp_end
count = 0
for(d in 1:num_days[m]){
for(h in 1:length(hours)){
count = count + 1
t_points$timestamp[count] <- paste(c(2017, as.character(months[m]), as.character(days_max[d]), as.character(hours[h])), collapse = "")
}
}
write.table(t_points, paste(c(SaveTo,"timepoints.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# loads.tab ---------------------------------------------------------------
ercot_loads <- data.frame(matrix(ncol = 3, nrow = dim(ercot_zones)[1]*dim(t_points)[1]))
colnames(ercot_loads) <- c("LOAD_ZONE","TIMEPOINT","zone_demand_mw")
row_count = 0
for(k in 1:dim(ercot_zones)[1]){ # loop through load zones
for(j in 1:dim(t_points)[1]){ # loop through timepoints
row_count = row_count+1
ercot_loads$LOAD_ZONE[row_count] <- as.character(ercot_zones$LOAD_ZONE[k])
ercot_loads$TIMEPOINT[row_count] <- t_points$timepoint_id[j]
ercot_loads$zone_demand_mw[row_count] <- as.numeric(PLEXOS_zone_data[j,k+4])
}
}
# Export .tab
write.table(ercot_loads, paste(c(SaveTo,"loads.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
# variable_capacity_factors.tab ------------------------------------------- # NEED TO SAVE ANNUAL CFS, THEN RUN LOOP
# ercot_var_gens <- ercot_gen_info$GENERATION_PROJECT[ercot_gen_info$gen_is_variable==1] # isolate list of variable generators
# ercot_cfs <- data.frame(matrix(ncol = 3, nrow = length(ercot_var_gens)*dim(t_points)[1]))
# colnames(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
# ercot_cfs$GENERATION_PROJECT <- rep(ercot_var_gens, each = dim(t_points)[1])
# ercot_cfs$gen_max_capacity_factor <- 1 # setting all cap at 1 for now
# ercot_cfs$timepoint <- as.integer( rep(1:dim(t_points)[1], length(ercot_var_gens)) )
# # rename columns and rows
# names(ercot_cfs) <- c("GENERATION_PROJECT","timepoint","gen_max_capacity_factor")
# row.names(ercot_cfs) <- 1:dim(ercot_cfs)[1]
# write.table(ercot_cfs, paste(c(SaveTo,"variable_capacity_factors.tab"), collapse = ""), sep="\t",row.names = F, quote = F)
file.copy("./2017_01/inputs/variable_capacity_factors.tab", SaveTo)
}
